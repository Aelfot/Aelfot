import groovy.transform.Field

metadata {
	definition(name: "Eurotronic Sensor", namespace: "aelfot", author: "Ravil Rubashkin") { 
		capability "CarbonDioxideMeasurement"
		capability "TemperatureMeasurement"
		capability "RelativeHumidityMeasurement"
		capability "Sensor"
		capability "Polling"

		attribute "VOC", "number"
		attribute "DewPoint", "number"
		attribute "VOC-Niveau", "enum", ["hervorragend","gut","mittelmäßig","gesundheitsschädlich","lebensgefahr"]
		attribute "CarbonDioxide-Niveau", "enum", ["hervorragend","gut","mittelmäßig","gesundheitsschädlich","lebensgefahr"]
		attribute "Home-Health", "enum", ["gut","mittelmäßig","gesundheitsschädlich","lebensgefahr"]

		command "setAssociationGroup"
		command "setAssociationGroup", [[name: "Group Number*",type:"NUMBER", description: "Provide the association group number to edit"], 
                                        [name: "Z-Wave Node*", type:"STRING", description: "Enter the node number (in hex) associated with the node"], 
                                        [name: "Action*", type:"ENUM", constraints: ["Add", "Remove"]],
                                        [name:"Multi-channel Endpoint", type:"NUMBER", description: "Currently not implemented"]]
		command "configure"

		fingerprint  mfr:"0148", prod:"0005", deviceId:"0001", inClusters:"0x5E,0x6C,0x55,0x98,0x9F"
		}

	def tempEinheit =  [:]
		tempEinheit << [0:"Celcius"]
		tempEinheit << [1:"Fahrenheit"]

	def aufloesung =  [:]
		aufloesung << [0:"Keine Nachkommastelle"]
		aufloesung << [1:"Eine Nachkommastelle"]
		aufloesung << [2:"Zwei Nachkommastellen"]

	def vocChangeReport =  [:]
		vocChangeReport << [0:"Keine Meldung"]
		vocChangeReport << [1:"Meldung bei Delta 0.1 ppm"]
		vocChangeReport << [2:"Meldung bei Delta 0.2 ppm"]
		vocChangeReport << [3:"Meldung bei Delta 0.3 ppm"]
		vocChangeReport << [4:"Meldung bei Delta 0.4 ppm"]
		vocChangeReport << [5:"Meldung bei Delta 0.5 ppm"]
		vocChangeReport << [6:"Meldung bei Delta 0.6 ppm"]
		vocChangeReport << [7:"Meldung bei Delta 0.7 ppm"]
		vocChangeReport << [8:"Meldung bei Delta 0.8 ppm"]
		vocChangeReport << [9:"Meldung bei Delta 0.9 ppm"]
		vocChangeReport << [10:"Meldung bei Delta 1.0 ppm"]

	def co2ChangeReport =  [:]
		co2ChangeReport << [0:"Keine Meldung"]
		co2ChangeReport << [1:"Meldung bei Delta 100 ppm"]
		co2ChangeReport << [2:"Meldung bei Delta 200 ppm"]
		co2ChangeReport << [3:"Meldung bei Delta 300 ppm"]
		co2ChangeReport << [4:"Meldung bei Delta 400 ppm"]
		co2ChangeReport << [5:"Meldung bei Delta 500 ppm"]
		co2ChangeReport << [6:"Meldung bei Delta 600 ppm"]
		co2ChangeReport << [7:"Meldung bei Delta 700 ppm"]
		co2ChangeReport << [8:"Meldung bei Delta 800 ppm"]
		co2ChangeReport << [9:"Meldung bei Delta 900 ppm"]
		co2ChangeReport << [10:"Meldung bei Delta 1000 ppm"]

	preferences {
		input name:"parameter1", type:"decimal", title:"Temperatur on Change Reporting", description:"0.1 - 5.0°C. Default: 0.5°C. 0 - off", defaultValue:0.5, range:"0..5.0"
		input name:"parameter2", type:"decimal", title:"Feuchtigkeit on Change Reporting", description:"1-10%. Default: 5%. 0 - off", defaultValue:5, range:"0..10"
		input name:"parameter3", type:"enum", title:"Temperatureeinheit", options:tempEinheit, description:"Default: °C", defaultValue:0
		input name:"parameter4", type:"enum", title:"Auflösung Temperatur", options:aufloesung, description:"Default: Eine Nachkommastelle", defaultValue:1
		input name:"parameter5", type:"enum", title:"Auflösung Feuchte", options:aufloesung, description:"Default: Keine Nachkommastelle", defaultValue:0
		input name:"parameter6", type:"enum", title:"VOC-on Change Reporting", options:vocChangeReport, description:"Default: 0.5 ppm", defaultValue:5
		input name:"parameter7", type:"enum", title:"CO2 Change Reporting", options:co2ChangeReport, description:"Default: 500 ppm", defaultValue:5
		input name:"parameter8", type:"bool", title:"Luftgüte per LED signalisieren", description:"Default: Luftgüte per Led signalisieren", defaultValue:true
		input name:"lg", type:"bool", title:"Enable debug message logging", description:"", defaultValue:false
	}
}

@Field static Map commandClassVersions = 
	[0x85:2,	//Association
	 0x59:1,	//Association Grp Info
	 0x70:1,	//Configuration
	 0x5A:1,	//Device Reset Locally
	 0x7A:3,	//Firmware Update MD (documentiert version 3)
	 0x72:1,	//Manufacturer Specific
	 0x31:10,	//Multilevel Sensor
	 0x71:8,	//Notifikation
	 0x73:1,	//Power Level
	 0x98:2,	//Security
	 0x6C:1,	//Supervision
	 0x55:2,	//Transport Service
	 0x86:2,	//Version
	 0x0A:2]	//Z-wave Plus Info

def parse(String description) {
	def cmd = zwave.parse(description, commandClassVersions)
	if (cmd) {
		return zwaveEvent(cmd)
	} else {
		log.warn "Non-parsed event: ${description}"
	}
}

void sendConfCommand(List<Integer> parametern = [1,2,3,4,5,6,7,8]){
	def cmds = []
	if (lg) log.info "Parameter ${parametern} werden gesendet"
	if (parametern) {
		parametern.each { k ->
			switch(k) {
				case 1:
					cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:1,	size:1,	scaledConfigurationValue: Math.round(parameter1 * 10).toInteger())
					log.info "Dem Parameter 1 ist den Wert ${Math.round(parameter1 * 10).toInteger()} gesendet"
				break;
				case 2:
					cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:2,	size:1,	scaledConfigurationValue: Math.round(parameter2).toInteger())
					log.info "Dem Parameter 2 ist den Wert ${Math.round(parameter2).toInteger()} gesendet"
				break;
				case 3:
					cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:3,	size:1,	scaledConfigurationValue: parameter3.toInteger())
					log.info "Dem Parameter 3 ist den Wert ${parameter3.toInteger()} gesendet"
				break;
				case 4:
					cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:4,	size:1,	scaledConfigurationValue: parameter4.toInteger())
					log.info "Dem Parameter 4 ist den Wert ${parameter4.toInteger()} gesendet"
				break;
				case 5:
					cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:5,	size:1,	scaledConfigurationValue: parameter5.toInteger())
					log.info "Dem Parameter 5 ist den Wert ${parameter5.toInteger()} gesendet"
				break;
				case 6:
					cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:6,	size:1,	scaledConfigurationValue: parameter6.toInteger())
					log.info "Dem Parameter 6 ist den Wert ${parameter6.toInteger()} gesendet"
				break;
				case 7:
					cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:7,	size:1,	scaledConfigurationValue: parameter7.toInteger())
					log.info "Dem Parameter 7 ist den Wert ${parameter7.toInteger()} gesendet"
				break;
				case 8:
					cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:8,	size:1,	scaledConfigurationValue: parameter8 ? 1 : 0)
					log.info "Dem Parameter 8 ist den Wert ${parameter8 ? 1 : 0} gesendet"
				break;
				default:
					log.warn "Parameter ${k} ist nicht hinterlegt!"
			}
			cmds << new hubitat.zwave.commands.configurationv1.ConfigurationGet(parameterNumber:k)
		}
		if (cmds) sendToDevice (cmds)
	}
}

void updated() {
	def List<Integer> geaenderteParametern = []
	if (state.parameter1 == null || state.parameter1 != parameter1) geaenderteParametern << 1
	if (state.parameter2 == null || state.parameter2 != parameter2) geaenderteParametern << 2
	if (state.parameter3 == null || state.parameter3 != parameter3) geaenderteParametern << 3
	if (state.parameter4 == null || state.parameter4 != parameter4) geaenderteParametern << 4
	if (state.parameter5 == null || state.parameter5 != parameter5) geaenderteParametern << 5
	if (state.parameter6 == null || state.parameter6 != parameter6) geaenderteParametern << 6
	if (state.parameter7 == null || state.parameter7 != parameter7) geaenderteParametern << 7
	if (state.parameter8 == null || state.parameter8 != parameter8) geaenderteParametern << 8
	if (geaenderteParametern) sendConfCommand(geaenderteParametern)
}

void installed() {
	log.info "Device ${device.label?device.label:device.name} is installed"
	def cmds = []
	sendEvent(name:"carbonDioxide",			value: 0,unit:"ppm")
	sendEvent(name:"temperature",			value: 0,unit:"°C")
	sendEvent(name:"humidity",				value: 0,unit:"%")
	sendEvent(name:"DewPoint",				value: 0)
	sendEvent(name:"VOC",					value: 0)
	cmds << new hubitat.zwave.commands.associationv2.AssociationSet(groupingIdentifier:1, nodeId:zwaveHubNodeId)
	for ( int i=1 ; i<=8 ; i++) {
		cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:i,	defaultValue: true)
		log.info "Parameter nummer ${i} ist zurückgesetzt"
	}
	sendToDevice (cmds)
}

void poll() {
	if (lg) log.info "poll"
	def cmds = []
	cmds << new hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelGet(scale:parameter3 == 1 ? 1 : 0,sensorType:0x01)
	cmds << new hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelGet(scale:0,sensorType:0x05)
	cmds << new hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelGet(scale:parameter3 == 1 ? 1 : 0,sensorType:0x0B)
	cmds << new hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelGet(scale:0,sensorType:0x11)
	cmds << new hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelGet(scale:1,sensorType:0x27)
	cmds << new hubitat.zwave.commands.notificationv8.NotificationGet(event:0x06,notificationType:0x0D,v1AlarmType:0x00)
	sendToDevice(cmds)
}

void zwaveEvent(hubitat.zwave.commands.deviceresetlocallyv1.DeviceResetLocallyNotification cmd) {
	log.warn "Device wurde zurückgesetz"
	sendEvent(name:"carbonDioxide",			value: 0,unit:"ppm")
	sendEvent(name:"temperature",			value: 0,unit:"°C")
	sendEvent(name:"humidity",				value: 0,unit:"%")
	sendEvent(name:"DewPoint",				value: 0)
	sendEvent(name:"VOC",					value: 0)
}

void zwaveEvent (hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelReport cmd) {
	def map = [:]	
	switch (cmd.sensorType) {
		case 0x01:
		map.name = "temperature"
		map.unit = cmd.scale == 1 ? "°F" : "°C"
		map.value = cmd.scaledSensorValue
		break;
		case 0x05:
		map.name = "humidity"			
		map.unit = cmd.scale == 1 ? "g/m^3" : "%"
		map.value = cmd.scaledSensorValue
		break;
		case 0x0B:
		map.name = "DewPoint"
		map.unit = cmd.scale == 1 ? "°F" : "°C"
		map.value = cmd.scaledSensorValue
		break;
		case 0x11:
		map.name = "carbonDioxide"
		map.unit = "ppm"
		map.value = cmd.scaledSensorValue
		if (map.value < 800) {
			notifity ("CO2",0)
		} else if (map.value < 1000) {
			notifity ("CO2",1)
		} else if (map.value < 1400) {
			notifity ("CO2",2)
		} else if (map.value < 2000) {
			notifity ("CO2",3)
		} else {
			notifity ("CO2",4)
		}
		break;
		case 0x27:
		map.name = "VOC"
		map.value = cmd.scaledSensorValue
		if (map.value < 0.065) {
			notifity ("VOC",0)
		} else if (map.value < 0.220) {
			notifity ("VOC",1)
		} else if (map.value < 0.660) {
			notifity ("VOC",2)
		} else if (map.value < 2.200) {
			notifity ("VOC",3)
		} else {
			notifity ("VOC",4)
		} 
		break;
		default:
		log.warn "Sensor Multilevel unhandled Report: ${cmd}"
	}
	if (lg) {log.info "${device.label?device.label:device.name} hat ${map.name} im Wert von ${map.value} gemessen"}
	sendEvent(map)
}

void zwaveEvent(hubitat.zwave.commands.configurationv1.ConfigurationReport cmd) {
	if (lg) log.info "${cmd}"
	def cmds = []
	switch (cmd.parameterNumber) {
		case 1:
		if (parameter1 != cmd.scaledConfigurationValue / 10) {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde nicht übernommen, erneuter Versuch"
			cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:1,	size:1,	scaledConfigurationValue: Math.round(parameter1 * 10).toInteger())
		} else {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde erfolgreich übernommen"
			state.parameter1 = parameter1
		}
		break;
		case 2:
		if (Math.round(parameter2) != cmd.scaledConfigurationValue) {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde nicht übernommen, erneuter Versuch"
			cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:2,	size:1,	scaledConfigurationValue: Math.round(parameter2).toInteger())
		} else {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde erfolgreich übernommen"
			state.parameter2 = parameter2
		}
		break;
		case 3:
		if (parameter3.toInteger() != cmd.scaledConfigurationValue) {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde nicht übernommen, erneuter Versuch"
			cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:3,	size:1,	scaledConfigurationValue: parameter3.toInteger())
		} else {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde erfolgreich übernommen"
			state.parameter3 = parameter3
		}
		break;
		case 4:
		if (parameter4.toInteger() != cmd.scaledConfigurationValue) {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde nicht übernommen, erneuter Versuch"
			cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:4,	size:1,	scaledConfigurationValue: parameter4.toInteger())
		} else {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde erfolgreich übernommen"
			state.parameter4 = parameter4
		}
		break;
		case 5:
		if (parameter5.toInteger() != cmd.scaledConfigurationValue) {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde nicht übernommen, erneuter Versuch"
			cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:5,	size:1,	scaledConfigurationValue: parameter5.toInteger())
		} else {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde erfolgreich übernommen"
			state.parameter5 = parameter5
		}
		break;
		case 6:
		if (parameter6.toInteger() != cmd.scaledConfigurationValue) {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde nicht übernommen, erneuter Versuch"
			cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:6,	size:1,	scaledConfigurationValue: parameter6.toInteger())
		} else {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde erfolgreich übernommen"
			state.parameter6 = parameter6
		}
		break;
		case 7:
		if (parameter7.toInteger() != cmd.scaledConfigurationValue) {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde nicht übernommen, erneuter Versuch"
			cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:7,	size:1,	scaledConfigurationValue: parameter7.toInteger())
		} else {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde erfolgreich übernommen"
			state.parameter7 = parameter7
		}
		break;
		case 8:
		if ((parameter8 ? 1 : 0) != cmd.scaledConfigurationValue) {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde nicht übernommen, erneuter Versuch"
			cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(parameterNumber:8,	size:1,	scaledConfigurationValue: parameter8 ? 1 : 0)
		} else {
			if (lg) log.info "Configurationsparameter nummer ${cmd.parameterNumber} wurde erfolgreich übernommen"
			state.parameter8 = parameter8
		}
		break;
		default:
		log.warn "Unhlandled Report ${cmd}"	
	}
	if (cmds != []) {
		cmds << new hubitat.zwave.commands.configurationv1.ConfigurationGet(parameterNumber:cmd.parameterNumber)
		sendToDevice(cmds)
	}
}

void zwaveEvent(hubitat.zwave.commands.notificationv8.NotificationReport cmd) {
	if (cmd.notificationType == 0x0D) {
		if (cmd.event == 0x06) {
			if (cmd.eventParametersLength != 0) {
				switch (cmd.eventParameter[0]) {
				case 0x01:
				sendEvent(name:"Home-Health",value:"gut",displayed:true)
				break;
				case 0x02:
				sendEvent(name:"Home-Health",value:"mittelmäßig",displayed:true)
				break;
				case 0x03:
				sendEvent(name:"Home-Health",value:"gesundheitsschädlich",displayed:true)
				break;
				case 0x04:
				sendEvent(name:"Home-Health",value:"lebensgefahr",displayed:true)
				break;
				}
			} else {
				if (lg) log.warn "Warn!!! Home-Health liefert wieder falsche Werte!!! ${cmd}"
			}
		} else {
			if (lg) log.warn "Warnung!!! Home-Health hat falsche Event gemeldet!!! ${cmd}"
		}
	} else {
		if (lg) log.warn "Warnung!!! Notifikation hat keine Home-Health gemeldet, algemeiner Fehler! ${cmd}"
	}
}

private notifity (String sensor,int value) {
    def msg = [:]
	switch (value) {
		case 0:
		msg.value = "hervorragend"
		break;
		case 1:
		msg.value = "gut"
		break;
		case 2:
		msg.value = "mittelmäßig"
		break;
		case 3:
		msg.value = "gesundheitsschädlich"
		break;
		case 4:
		msg.value = "lebensgefahr"
		break;
		default:
		log.debug "Fehler in vocNotifity"
	}
	if (sensor == "CO2") {
		msg.name = "CarbonDioxide-Niveau"
	} else {
		msg.name = "VOC-Niveau"
	}
	if (lg) log.info "Notifikaton is ${msg}"
	sendEvent (msg)
}

void zwaveEvent(hubitat.zwave.Command cmd) {
	log.debug "${device.displayName}: Unhandled: ${cmd}"
}

void sendToDevice(List<hubitat.zwave.Command> cmds, Long delay=300) {
    sendHubCommand(new hubitat.device.HubMultiAction(commands(cmds, delay), hubitat.device.Protocol.ZWAVE))
}

void sendToDevice(hubitat.zwave.Command cmd, Long delay=300) {
    sendHubCommand(new hubitat.device.HubAction(zwaveSecureEncap(cmd.format()), hubitat.device.Protocol.ZWAVE))
}

List<String> commands(List<hubitat.zwave.Command> cmds, Long delay=300) {
    return delayBetween(cmds.collect{ zwaveSecureEncap(it.format()) }, delay)
}

void configure() {
	def cmds = processAssociations()
	if (cmds) sendToDevice(cmds)
}

void setDefaultAssociations() {
	def hubitatHubID = (zwaveHubNodeId.toString().format( '%02x', zwaveHubNodeId )).toUpperCase()
	state.defaultG1 = [hubitatHubID]
	state.defaultG2 = []
	state.defaultG3 = []
}

void setAssociationGroup(group, nodes, action, endpoint = null) {
	if (!state."desiredAssociation${group}") {
		state."desiredAssociation${group}" = nodes
	} else {
		switch (action) {
			case 0:
				state."desiredAssociation${group}" = state."desiredAssociation${group}" - nodes
			break
			case 1:
				state."desiredAssociation${group}" = state."desiredAssociation${group}" + nodes
			break
		}
	}
}

def processAssociations(){
   def cmds = []
   setDefaultAssociations()
   def associationGroups = 2
   if (state.associationGroups) {
       associationGroups = state.associationGroups
   } else {
       if (infoEnable) log.info "${device.label?device.label:device.name}: Getting supported association groups from device"
       cmds <<  zwave.associationV2.associationGroupingsGet()
   }
   for (int i = 1; i <= associationGroups; i++){
      if(state."actualAssociation${i}" != null){
         if(state."desiredAssociation${i}" != null || state."defaultG${i}") {
            def refreshGroup = false
            ((state."desiredAssociation${i}"? state."desiredAssociation${i}" : [] + state."defaultG${i}") - state."actualAssociation${i}").each {
                if (it != null){
                    log.info "${device.label?device.label:device.name}: Adding node $it to group $i"
                    cmds << zwave.associationV2.associationSet(groupingIdentifier:i, nodeId:Integer.parseInt(it,16))
                    refreshGroup = true
                }
            }
            ((state."actualAssociation${i}" - state."defaultG${i}") - state."desiredAssociation${i}").each {
                if (it != null){
                    log.info "${device.label?device.label:device.name}: Removing node $it from group $i"
                    cmds << zwave.associationV2.associationRemove(groupingIdentifier:i, nodeId:Integer.parseInt(it,16))
                    refreshGroup = true
                }
            }
            if (refreshGroup == true) cmds << zwave.associationV2.associationGet(groupingIdentifier:i)
            else log.info "${device.label?device.label:device.name}: There are no association actions to complete for group $i"
         }
      } else {
         if (infoEnable) log.info "${device.label?device.label:device.name}: Association info not known for group $i. Requesting info from device."
         cmds << zwave.associationV2.associationGet(groupingIdentifier:i)
      }
   }
   return cmds
}

void zwaveEvent(hubitat.zwave.commands.associationv2.AssociationReport cmd) {
    if (debugEnable) log.debug "${device.label?device.label:device.name}: ${cmd}"
    def temp = []
    if (cmd.nodeId != []) {
       cmd.nodeId.each {
          temp += it.toString().format( '%02x', it.toInteger() ).toUpperCase()
       }
    } 
    state."actualAssociation${cmd.groupingIdentifier}" = temp
    if (infoEnable) log.info "${device.label?device.label:device.name}: Associations for Group ${cmd.groupingIdentifier}: ${temp}"
    updateDataValue("associationGroup${cmd.groupingIdentifier}", "$temp")
}

void zwaveEvent(hubitat.zwave.commands.associationv2.AssociationGroupingsReport cmd) {
    if (debugEnable) log.debug "${device.label?device.label:device.name}: ${cmd}"
    sendEvent(name: "groups", value: cmd.supportedGroupings)
    if (infoEnable) log.info "${device.label?device.label:device.name}: Supported association groups: ${cmd.supportedGroupings}"
    state.associationGroups = cmd.supportedGroupings
}
