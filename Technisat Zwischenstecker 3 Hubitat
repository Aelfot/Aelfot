
metadata {
	definition (name: "Technisat Zwischenstecker 3", namespace: "Aelfot", author: "Rubashkin Ravil", genericHandler: "Z-Wave") {
		capability "Energy Meter"
		capability "Outlet"
		capability "Power Meter"
		capability "Refresh"
		capability "Configuration"
		capability "Sensor"
		capability "VoltageMeasurement"
		capability "CurrentMeter"

		command "reset"
		attribute "Power Faktor", "number"

		fingerprint inClusters: "0x25,0x32", deviceJoinName: "Switch"
	}

	// simulator metadata
	simulator {
		status "on":  "command: 2003, payload: FF"
		status "off": "command: 2003, payload: 00"

		// reply messages
		reply "2001FF,delay 100,2502": "command: 2503, payload: FF"
		reply "200100,delay 100,2502": "command: 2503, payload: 00"
	}
	
	def restoreSwitchStateMode = [:]
		restoreSwitchStateMode << ["0" : "Switch off"]
		restoreSwitchStateMode << ["1" : "Last switch state"]
		restoreSwitchStateMode << ["2" : "Switch on"]
	
	def modeOfSwitchOffFunction = [:]
		modeOfSwitchOffFunction << ["0" : "Disable"]
		modeOfSwitchOffFunction << ["1" : "Enable"]		
	
	def ledIndicationMode = [:]
		ledIndicationMode << ["1" : "Show switch state"]
		ledIndicationMode << ["2" : "Show night mode"]
		ledIndicationMode << ["3" : "One flash mode"]
	
	def rfOffCommandMode = [:]
		rfOffCommandMode << ["0" : "Switch off"]
		rfOffCommandMode << ["1" : "Ignore"]
		rfOffCommandMode << ["2" : "Switch toggle"]
		rfOffCommandMode << ["3" : "Switch on"]
	
	preferences {
		input name:"parameter1",	type:"decimal",	title:"Watt Meter Report Period",				description:"In Second. Default - 3600 s",	range:"5..163835",				defaultValue: 3600
		input name:"parameter2",	type:"decimal",	tilte:"KWH Meter Report Period",				description:"In Minutes. Default - 60",		range:"10..327670",				defaultValue: 60
		input name:"parameter3",	type:"decimal",	title:"Threshold of current for Load caution",	description:"In Amper. Default - 11.00 A",	range:"0.01..11.00",			defaultValue: 11
		input name:"parameter4",	type:"decimal",	title:"Threshold of KWh for Load caution",		description:"In kWh. Default - 10000 kWh",	range:"1..10000",				defaultValue: 10000
		input name:"parameter5",	type:"enum",	title:"Restore switch state mode",				description:"Default - Last switch state",	options:restoreSwitchStateMode,	defaultValue:"1"
		input name:"parameter6",	type:"enum",	title:"Mode of Switch Off function",			description:"Default - Enable",				options:modeOfSwitchOffFunction,defaultValue:"1"
		input name:"parameter7",	type:"enum",	title:"LED indication mode",					description:"Default - Show switch state",	options:ledIndicationMode,		defaultValue:"1"
		input name:"parameter8",	type:"decimal",	title:"Auto off timer",							description:"In Second. Default - 0 (off)",	range:"0..32767",				defaultValue: 0
		input name:"parameter9",	type:"enum",	title:"RF off command mode",					description:"Default - Switch off",			options:rfOffCommandMode,		defaultValue:"0"
	}

}

def installed() {
	log.debug "installed()"
	initialize()
}

def updated() {
	initialize()
	try {
		if (!state.MSR) {
			response(zwave.manufacturerSpecificV2.manufacturerSpecificGet().format())
		}
	} catch (e) {
		log.debug e
	}
}

def initialize() {
	parameter1 = 3600
	parameter2 = 60
	parameter3 = 11
	parameter4 = 10000
	parameter5 = "1"
	parameter6 = "1"
	parameter7 = "1"
	parameter8 = 0
	parameter9 = "0"
	configure ()
}

def getCommandClassVersions() {
	[
		0x20: 1,  // Basic
		0x32: 3,  // Meter
		0x70: 1,  // Configuration
		0x72: 2,  // ManufacturerSpecific
	]
}

// parse events into attributes
def parse(String description) {
	log.debug "parse() - description: "+description
	def result = null
	if (description != "updated") {
		def cmd = zwave.parse(description, commandClassVersions)
		if (cmd) {
			result = zwaveEvent(cmd)
			log.debug("'$description' parsed to $result")
		} else {
			log.debug("Couldn't zwave.parse '$description'")
		}
	}
	result
}

def zwaveEvent(hubitat.zwave.commands.meterv3.MeterReport cmd) {
	log.debug "v3 Meter report: "+cmd
	if (cmd.meterType == 1) {
		if (cmd.scale == 0) {			
			createEvent(name: "energy", value: cmd.scaledMeterValue, unit: "kWh")
		} else if (cmd.scale == 2) {
			createEvent(name: "power", value: cmd.scaledMeterValue, unit: "W") //Math.round(cmd.scaledMeterValue)
		} else if (cmd.scale == 4) {
			createEvent(name: "voltage", value: cmd.scaledMeterValue, unit: "V")
		} else if (cmd.scale == 5) {
			createEvent(name: "amperage", value: cmd.scaledMeterValue, unit: "A")
		} else if (cmd.scale == 6) {
			sendEvent(name: "Power Faktor", value: cmd.scaledMeterValue)
		}
	}
}

def zwaveEvent(hubitat.zwave.commands.basicv1.BasicReport cmd)
{
	log.debug "Basic report: "+cmd
	def value = (cmd.value ? "on" : "off")
	def evt = createEvent(name: "switch", value: value, type: "physical", descriptionText: "$device.displayName was turned $value")
	if (evt.isStateChange) {
		[
			evt, 
			response(["delay 3000", encap(meterGet(scale: 2))]),
			response(["delay 3000", encap(meterGet(scale: 4))]),
			response(["delay 3000", encap(meterGet(scale: 5))]),
			response(["delay 3000", encap(meterGet(scale: 6))])
		]
	} else {
		evt
	}
}

def zwaveEvent(hubitat.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
	def result = []

	def msr = String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId)
	log.debug "msr: $msr"
	updateDataValue("MSR", msr)

	result << createEvent(descriptionText: "$device.displayName MSR: $msr", isStateChange: false)
}

def zwaveEvent(hubitat.zwave.Command cmd) {
	log.debug "${device.displayName}: Unhandled: $cmd"
	[:]
}

def on() {
	encapSequence([
		zwave.basicV1.basicSet(value: 0xFF),
		zwave.basicV1.basicGet()
	], 3000)
}

def off() {
	encapSequence([
		zwave.basicV1.basicSet(value: 0x00),
		zwave.basicV1.basicGet()
	], 3000)
}

/**
 * PING is used by Device-Watch in attempt to reach the Device
 * */
def ping() {
	log.debug "ping()"
	refresh()
}

def poll() {
	sendHubCommand(refresh())
}

def refresh() {
	log.debug "refresh()"
	encapSequence([
		zwave.switchBinaryV1.switchBinaryGet(),
		meterGet(scale: 0),
		meterGet(scale: 2),
		meterGet(scale: 4),
		meterGet(scale: 5),
		meterGet(scale: 6)
	])
}

def reset() {
	encapSequence([
		meterReset(),
		meterGet(scale: 0)
	])
}

def meterGet(map)
{
	return zwave.meterV3.meterGet(map)
}

def meterReset()
{
	return zwave.meterV3.meterReset()
}

/*
 * Security encapsulation support:
 */
def zwaveEvent(hubitat.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
	def encapsulatedCommand = cmd.encapsulatedCommand(commandClassVersions)
	if (encapsulatedCommand) {
		log.debug "Parsed SecurityMessageEncapsulation into: ${encapsulatedCommand}"
		zwaveEvent(encapsulatedCommand)
	} else {
		log.warn "Unable to extract Secure command from $cmd"
	}
}

def zwaveEvent(hubitat.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd) {
	if (cmd.commandClass == 0x6C && cmd.parameter.size >= 4) { // Supervision encapsulated Message
		// Supervision header is 4 bytes long, two bytes dropped here are the latter two bytes of the supervision header
		cmd.parameter = cmd.parameter.drop(2)
		// Updated Command Class/Command now with the remaining bytes
		cmd.commandClass = cmd.parameter[0]
		cmd.command = cmd.parameter[1]
		cmd.parameter = cmd.parameter.drop(2)
	}
	def encapsulatedCommand = cmd.encapsulatedCommand()
	zwaveEvent(encapsulatedCommand)
}

def zwaveEvent(hubitat.zwave.commands.crc16encapv1.Crc16Encap cmd) {
	def version = commandClassVersions[cmd.commandClass as Integer]
	def ccObj = version ? zwave.commandClass(cmd.commandClass, version) : zwave.commandClass(cmd.commandClass)
	def encapsulatedCommand = ccObj?.command(cmd.command)?.parse(cmd.data)
	if (encapsulatedCommand) {
		log.debug "Parsed Crc16Encap into: ${encapsulatedCommand}"
		zwaveEvent(encapsulatedCommand)
	} else {
		log.warn "Unable to extract CRC16 command from $cmd"
	}
}

private secEncap(hubitat.zwave.Command cmd) {
	log.debug "encapsulating command using Secure Encapsulation, command: $cmd"
	zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
}

private crcEncap(hubitat.zwave.Command cmd) {
	log.debug "encapsulating command using CRC16 Encapsulation, command: $cmd"
	zwave.crc16EncapV1.crc16Encap().encapsulate(cmd).format()
}

private encap(hubitat.zwave.Command cmd) {
	if (zwaveInfo?.zw?.contains("s")) {
		secEncap(cmd)
	} else if (zwaveInfo?.cc?.contains("56")){
		crcEncap(cmd)
	} else {
		log.debug "no encapsulation supported for command: $cmd"
		cmd.format()
	}
}

private encapSequence(cmds, Integer delay=250) {
	delayBetween(cmds.collect{ encap(it) }, delay)
}

def stringToHexList(String value) {
	switch (value) {
        case "0"   : return 0x00
		case "1"   : return 0x01
		case "2"   : return 0x02
		case "3"   : return 0x03
		case "4"   : return 0x04
		case "5"   : return 0x05
		case "6"   : return 0x06
		case "7"   : return 0x07
		case "8"   : return 0x08
		case "9"   : return 0x09					
	}
}

def configure() {
	def parameter1Hex = Math.round(parameter1 / 5)
	def parameter2Hex = Math.round(parameter2 / 10)
	def parameter3Hex = Math.round(parameter3 * 100)
	def parameter4Hex = Math.round(parameter4)
	def parameter5Hex = stringToHexList (parameter5)
	def parameter6Hex = stringToHexList (parameter6)
	def parameter7Hex = stringToHexList (parameter7)
	def parameter8Hex = Math.round(parameter8)
	def parameter9Hex = stringToHexList (parameter9)
	
	def result = []	
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter1Hex, parameterNumber:1, size:2)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter2Hex, parameterNumber:2, size:2)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter3Hex, parameterNumber:3, size:2)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter4Hex, parameterNumber:4, size:2)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter5Hex, parameterNumber:5, size:1)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter6Hex, parameterNumber:6, size:1)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter7Hex, parameterNumber:7, size:1)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter8Hex, parameterNumber:8, size:2)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter9Hex, parameterNumber:9, size:1)))

	result
}
