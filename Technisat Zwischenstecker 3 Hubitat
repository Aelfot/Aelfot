import hubitat.helper.HexUtils

metadata {
	definition (name: "Schnuler", namespace: "Schnuler", author: "Schnuler") {
		capability "Sensor"
		capability "CurrentMeter"		//amperage - NUMBER, unit:A
		capability "EnergyMeter"		//energy - NUMBER, unit:kWh
		capability "PowerMeter"			//power - NUMBER, unit:W
		capability "VoltageMeasurement"	//voltage - NUMBER, unit:V; frequency - NUMBER, unit:Hz
		
		capability "Configuration"
		
		capability "Polling"
		
		capability "Actuator"
		capability "Outlet"				//switch - ENUM ["on", "off"]
		capability "Switch"				//switch - ENUM ["on", "off"]
		
		attribute "Overload", "bool"
		attribute "PowerFaktor", "number"
		attribute "DeviceResetLocally", "bool"
		
		command "reset"
	}
	
	def restoreSwitchStateMode = [:]
		restoreSwitchStateMode << ["0" : "Switch off"]
		restoreSwitchStateMode << ["1" : "Last switch state"]
		restoreSwitchStateMode << ["2" : "Switch on"]
	
	def modeOfSwitchOffFunction = [:]
		modeOfSwitchOffFunction << ["0" : "Disable"]
		modeOfSwitchOffFunction << ["1" : "Enable"]		
	
	def ledIndicationMode = [:]
		ledIndicationMode << ["1" : "Show switch state"]
		ledIndicationMode << ["2" : "Show night mode"]
		ledIndicationMode << ["3" : "One flash mode"]
	
	def rfOffCommandMode = [:]
		rfOffCommandMode << ["0" : "Switch off"]
		rfOffCommandMode << ["1" : "Ignore"]
		rfOffCommandMode << ["2" : "Switch toggle"]
		rfOffCommandMode << ["3" : "Switch on"]

	preferences {
		input name:"log", type: "bool", title: "Enable debug message logging", description: ""
		input name:"status", type: "bool", title: "Enable Status message", description: ""
		input name:"parameter1",	type:"number",	title:"Watt Meter Report Period",				description:"In Second (5s Takt). Default - 3600 s",	range:"5..163835",				defaultValue: 3600
		input name:"parameter2",	type:"number",	title:"KWH Meter Report Period",				description:"In Minutes (10 Min Takt). Default - 60",	range:"10..327670",				defaultValue: 60
		input name:"parameter3",	type:"decimal",	title:"Threshold of current for Load caution",	description:"In Amper (0.01 A Takt). Default - 13.00 A",range:"0.01..13.00",			defaultValue: 13
		input name:"parameter4",	type:"number",	title:"Threshold of KWh for Load caution",		description:"In kWh. Default - 10000 kWh",				range:"1..10000",				defaultValue: 10000
		input name:"parameter5",	type:"enum",	title:"Restore switch state mode",				description:"Default - Last switch state",				options:restoreSwitchStateMode,	defaultValue:"1"
		input name:"parameter6",	type:"enum",	title:"Mode of Switch Off function",			description:"Default - Enable",							options:modeOfSwitchOffFunction,defaultValue:"1"
		input name:"parameter7",	type:"enum",	title:"LED indication mode",					description:"Default - Show switch state",				options:ledIndicationMode,		defaultValue:"1"
		input name:"parameter8",	type:"number",	title:"Auto off timer",							description:"In Second. Default - 0 (off)",				range:"0..32767",				defaultValue: 0
		input name:"parameter9",	type:"enum",	title:"RF off command mode",					description:"Default - Switch off",						options:rfOffCommandMode,		defaultValue:"0"
		input name:"parameter11",	type:"enum",	title:"Manual Switch Report mode ",				description:"Default - Enable",							options:modeOfSwitchOffFunction,defaultValue:"1"
	}
}

def parse(String description) {
	def cmd = zwave.parse(description, getCommandClassVersion())
	if (cmd) {        
		return zwaveEvent(cmd)
    } else {
		if (log) {log.debug "Non-parsed event: ${description}"}
    }
}

def configure() {
	if (log) {log.trace "configure"}
	def cmds = []
	cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(scaledConfigurationValue: Math.round(parameter1 / 5),							parameterNumber:1, size:2).format()
	cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(scaledConfigurationValue: Math.round(parameter2 / 10),							parameterNumber:2, size:2).format()
	cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(scaledConfigurationValue: Math.round(parameter3 * 100),							parameterNumber:3, size:2).format()
	cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(scaledConfigurationValue: Math.round(parameter4),								parameterNumber:4, size:2).format()
	cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(scaledConfigurationValue: hubitat.helper.HexUtils.hexStringToInt(parameter5),	parameterNumber:5, size:1).format()
	cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(scaledConfigurationValue: hubitat.helper.HexUtils.hexStringToInt(parameter6),	parameterNumber:6, size:1).format()
	cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(scaledConfigurationValue: hubitat.helper.HexUtils.hexStringToInt(parameter7),	parameterNumber:7, size:1).format()
	cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(scaledConfigurationValue: Math.round(parameter8),								parameterNumber:8, size:2).format()
	cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(scaledConfigurationValue: hubitat.helper.HexUtils.hexStringToInt(parameter9),	parameterNumber:9, size:1).format()
	cmds << new hubitat.zwave.commands.configurationv1.ConfigurationSet(scaledConfigurationValue: hubitat.helper.HexUtils.hexStringToInt(parameter11),	parameterNumber:11, size:1).format()
	sendToDevice(cmds)
}

def on() {
	sendToDevice(new hubitat.zwave.commands.switchbinaryv1.SwitchBinarySet(switchValue: 0xFF).format())
}

def off() {
	sendToDevice(new hubitat.zwave.commands.switchbinaryv1.SwitchBinarySet(switchValue: 0x00).format())
}

def reset() {
	if (log) {log.trace "reset"}
	sendEvent(name:"Overload", value: false)
	sendEvent(name:"DeviceResetLocally", value: false)
	sendToDevice(new hubitat.zwave.commands.meterv3.MeterReset().format())
}

def poll() {
	if (log) {log.trace "poll"}
	def cmds = []
	cmds << new hubitat.zwave.commands.meterv3.MeterGet(scale: 0x02).format()
	cmds << new hubitat.zwave.commands.meterv3.MeterGet(scale: 0x00).format()
	cmds << new hubitat.zwave.commands.meterv3.MeterGet(scale: 0x04).format()
	cmds << new hubitat.zwave.commands.meterv3.MeterGet(scale: 0x05).format()
	cmds << new hubitat.zwave.commands.meterv3.MeterGet(scale: 0x06).format()
	sendToDevice (cmds)
}

def zwaveEvent(hubitat.zwave.commands.deviceresetlocallyv1.DeviceResetLocallyNotification cmd) {
	sendEvent(name:"DeviceResetLocally", value: true)
}

def zwaveEvent(hubitat.zwave.commands.meterv3.MeterReport cmd) {
	/*
	BigDecimal scaledPreviousMeterValue
	*/
	def result = [:]
	if (cmd.meterType == 0x01) {
		switch (cmd.scale){
			case 0x02:
			result.name = "power"
			result.value = cmd.scaledMeterValue
			result.unit = "W"
			break;
			case 0x00:
			result.name = "energy"
			result.value = cmd.scaledMeterValue
			result.unit = "kWh"
			break;
			case 0x04:
			result.name = "voltage"
			result.value = cmd.scaledMeterValue
			result.unit = "V"
			break;
			case 0x05:
			result.name = "amperage"
			result.value = cmd.scaledMeterValue
			result.unit = "A"
			break;
			case 0x06:
			result.name = "PowerFaktor"
			result.value = cmd.scaledMeterValue
			break;
			default :
			if (log) {log.debug "Unhandled Message from Meter: ${cmd}"}
			break;
		}
	} else {
		if (log) {log.debug "Unhandled Metertype: ${cmd}"}
	}
	if (status) {log.trace "Meter Report: ${result}"}
	sendEvent(result)
}

def zwaveEvent(hubitat.zwave.commands.alarmv1.AlarmReport cmd) {
	if (log) {log.trace "Alarm Report"}
	if (cmd.alarmType == 0x08) {
		if (cmd.alarmLevel == 0xFF) { //overload with >14.5A
			sendEvent(name:"Overload",value:"true")
		} else {
			sendEvent(name:"Overload",value:"false")
		}
	}
}

def zwaveEvent(hubitat.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd) {
	if (cmd.value == 0) {	//is off
		if (status) {log.info "$device is off"}
		sendEvent(name:"switch",value:"off",displayed:true)
	} else {				//is on
		if (status) {log.info "$device is on"}
		sendEvent(name:"switch",value:"on",displayed:true)
	}
}

def zwaveEvent(hubitat.zwave.Command cmd) {
	if (log) {log.debug "${device.displayName}: Unhandled: $cmd"}
}

void updated() {
	if (log) {log.debug "Updated"}
	configure()
}

void installed() {
	if (log) {log.debug "Installed"}
}

private getCommandClassVersion() {
	[0x5E:2,	//Z-wave Plus Info
	 0x86:1,	//Version
	 0x72:2,	//Manufacturer Specific
	 0x98:1,	//Security
	 0x5A:1,	//Device Reset Lokally
	 0x85:2,	//Association
	 0x59:1,	//Association Group Info
	 0x73:1,	//Power Level
	 0x25:1,	//Switch Binary
	 0x20:1,	//Basic
	 0x27:1,	//Switch All
	 0x32:3,	//Meter
	 0x70:1,	//Configuration
	 0x71:1,	//Alarm
	 0x75:1,	//Protection
	 0x7A:2		//Frimware Update MD
	]
}

void sendToDevice(List<String> cmds, Long delay=300) {
    sendHubCommand(new hubitat.device.HubMultiAction(commands(cmds, delay), hubitat.device.Protocol.ZWAVE))
}

void sendToDevice(String cmd, Long delay=300) {
    sendHubCommand(new hubitat.device.HubAction(zwaveSecureEncap(cmd), hubitat.device.Protocol.ZWAVE))
}

List<String> commands(List<String> cmds, Long delay=300) {
    return delayBetween(cmds.collect{ zwaveSecureEncap(it) }, delay)
}
