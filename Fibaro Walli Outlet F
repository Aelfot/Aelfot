
metadata {
	definition (name: "Z-Wave Metering Switch", namespace: "Aelfot", author: "Rubashkin Ravil", genericHandler: "Z-Wave") {
		capability "Energy Meter"
		capability "Actuator"
		capability "Switch"
		capability "Power Meter"
		capability "Refresh"
		capability "Configuration"
		capability "Sensor"
		capability "Light"
		capability "Health Check"

		command "reset"

		fingerprint inClusters: "0x25,0x32", deviceJoinName: "Switch"
		fingerprint mfr: "010F", prod: "0602", model: "1001", deviceJoinName: "Fibaro Outlet", ocfDeviceType: "oic.d.smartplug" // EU //Fibaro Wall Plug ZW5
		fingerprint mfr: "010F", prod: "1801", model: "1000", deviceJoinName: "Fibaro Outlet", ocfDeviceType: "oic.d.smartplug"// UK //Fibaro Wall Plug ZW5
		fingerprint mfr: "010F", prod: "1F01", model: "1000", deviceJoinName: "Fibaro Outlet", ocfDeviceType: "oic.d.smartplug" //EU //Fibaro walli Outlet //Fibaro Outlet
	}

	// simulator metadata
	simulator {
		status "on":  "command: 2003, payload: FF"
		status "off": "command: 2003, payload: 00"

		for (int i = 0; i <= 10000; i += 1000) {
			status "power  ${i} W": new hubitat.zwave.Zwave().meterV1.meterReport(
				scaledMeterValue: i, precision: 3, meterType: 4, scale: 2, size: 4).incomingMessage()
		}
		for (int i = 0; i <= 100; i += 10) {
			status "energy	${i} kWh": new hubitat.zwave.Zwave().meterV1.meterReport(
				scaledMeterValue: i, precision: 3, meterType: 0, scale: 0, size: 4).incomingMessage()
		}

		// reply messages
		reply "2001FF,delay 100,2502": "command: 2503, payload: FF"
		reply "200100,delay 100,2502": "command: 2503, payload: 00"
	}
	
	def letzterStatus = [:]
		letzterStatus << ["0" : "bleibt nach dem Wiederherstellen der Stromversorgung ausgeschaltet"]
		letzterStatus << ["1" : "stellt den gespeicherten Zustand nach dem Wiederherstellen der Stromversorgung wieder her"]
	
	def ledFarbeImEingeschaltetenZustand = [:]
		ledFarbeImEingeschaltetenZustand << ["0" : "LED Deaktiviert"]
		ledFarbeImEingeschaltetenZustand << ["1" : "Weiß"]
		ledFarbeImEingeschaltetenZustand << ["2" : "Rot"]
		ledFarbeImEingeschaltetenZustand << ["3" : "Grün"]
		ledFarbeImEingeschaltetenZustand << ["4" : "Blau"]
		ledFarbeImEingeschaltetenZustand << ["5" : "Gelb"]
		ledFarbeImEingeschaltetenZustand << ["6" : "Cyan"]
		ledFarbeImEingeschaltetenZustand << ["7" : "Magenta"]
		ledFarbeImEingeschaltetenZustand << ["8" : "Farbwechsel je nach gemessener Leistung stufenlos möglich"]
		ledFarbeImEingeschaltetenZustand << ["9" : "Farbveränderungen in Stufen in Abhängigkeit von der gemessenen Leistung"]
	
	def ledFarbeImAusgeschaltetenZustand = [:]
		ledFarbeImAusgeschaltetenZustand << ["0" : "LED Deaktiviert"]
		ledFarbeImAusgeschaltetenZustand << ["1" : "Weiß"]
		ledFarbeImAusgeschaltetenZustand << ["2" : "Rot"]
		ledFarbeImAusgeschaltetenZustand << ["3" : "Grün"]
		ledFarbeImAusgeschaltetenZustand << ["4" : "Blau"]
		ledFarbeImAusgeschaltetenZustand << ["5" : "Gelb"]
		ledFarbeImAusgeschaltetenZustand << ["6" : "Cyan"]
		ledFarbeImAusgeschaltetenZustand << ["7" : "Magenta"]
	
	def leistungsberichteBeinhaltenEigenverbrauch = [:]
		leistungsberichteBeinhaltenEigenverbrauch << ["0" : "Deaktiviert"]
		leistungsberichteBeinhaltenEigenverbrauch << ["1" : "Aktiviert"]
	
	preferences {
		input "parameter1", "enum", title: "Letzter Status", options: letzterStatus, description: "Dieser Parameter legt fest, wie das Gerät bei einem Ausfall der Stromversorgung (z.B. Stromausfall) reagiert. Default - speichern", defaultValue: "1", required: false
		input name: "parameter2", title: "Überlastschutz", description: "Diese Funktion ermöglicht es, das kontrollierte Gerät auszuschalten, wenn die definierte Leistung überschritten wird. Das kontrollierte Gerät kann über eine Taste oder das Senden eines Steuerrahmens wieder eingeschaltet werden in W. Voreingestellt - aus", type: "decimal", range: "0,1.0..3680.0", defaultValue: 0
		input name: "parameter10", title: "LED Leistungslimit", description: "Dieser Parameter bestimmt die maximale Wirkleistung. Bei Überschreitung blinkt der LED-Rahmen violett. Die Funktion ist nur aktiv, wenn Parameter 'LED Farbe im Eingeschalteten Zustand' auf 'Farbwechsel' eingestellt ist. Default - 3680W", type: "decimal", range: "50.0..3680.0", defaultValue: 3680.0
		input "parameter11", "enum", title: "LED Farbe im Eingeschalteten Zustand", options: ledFarbeImEingeschaltetenZustand, description: "Dieser Parameter definiert die LED-Farbe, wenn das Gerät eingeschaltet ist. Bei Einstellung auf 'Farbwechsel' ändert sich die LED-Frame-Farbe je nach gemessener Leistung und Parameter 'Leistungslimit'. Andere Farben sind fest eingestellt und nicht vom Stromverbrauch abhängig. Default - 'Weiß'", defaultValue: "1", required: false
		input "parameter12", "enum", title: "LED Farbe im Ausgeschalteten Zustand", options: ledFarbeImAusgeschaltetenZustand, description: "Dieser Parameter definiert die LED-Farbe, wenn das Gerät ausgeschaltet ist. Default - 'Aus'", defaultValue: "0", required: false
		input name: "parameter13", title: "LED Helligkeit", description: "Mit diesem Parameter kann die Helligkeit des LED-Rahmens eingestellt werden. Default - 100%. 101/102 Helligkeit direkt/umgekehrt proportional zum eingestellten Wert", type: "decimal", range: "0..102", defaultValue: 100
		input "parameter60", "enum", title: "Leistungsberichte beinhalten Eigenverbrauch", options: leistungsberichteBeinhaltenEigenverbrauch, description: "Dieser Parameter legt fest, ob die Leistungsmessungen die von dem Gerät selbst verbrauchte Leistung beinhalten sollen. Default - deaktiviert", defaultValue: "0", required: false
		input name: "parameter61", title: "Leistungsberichte bei Änderungen", description: "Dieser Parameter definiert eine minimale Änderung (gegenüber dem zuletzt gemeldeten) der gemessenen Leistung, die zum Senden eines neuen Berichts führt. Für Lasten unter 50W ist der Parameter irrelevant, der Bericht wird alle 5W Änderungen gesendet. Voreingestellt - 15%", type: "decimal", range: "0..500", defaultValue: 15
		input name: "parameter62", title: "Periodischer Bericht der Leistung", description: "Dieser Parameter definiert das Meldeintervall für die gemessene Leistung. Periodische Berichte sind unabhängig von Wertänderungen. Voreingestellt - 3600s. (30-32400)", type: "decimal", range: "0,30..32400", defaultValue: 3600
		input name: "parameter65", title: "Energieberichte über Veränderungen", description: "Dieser Parameter definiert eine minimale Änderung (gegenüber dem letzten Bericht) der gemessenen Energie, die zum Senden eines neuen Berichts führt. Voreingestellt - 0,1 kWh. (0.01- 5kWh)", type: "decimal", range: "0,0.01..5", defaultValue: 0.1
		input name: "parameter66", title: "Periodischer Bericht der Energie", description: "Dieser Parameter definiert das Meldeintervall für die gemessene Energie. Periodische Berichte sind unabhängig von Wertänderungen. Voreingestellt - 3600 s. (30 - 32400 s)", type: "decimal", range: "0,30..32400", defaultValue: 3600
	}

}

def installed() {
	log.debug "installed()"
	initialize()
}

def updated() {
	initialize()
	try {
		if (!state.MSR) {
			response(zwave.manufacturerSpecificV2.manufacturerSpecificGet().format())
		}
	} catch (e) {
		log.debug e
	}
}

def initialize() {
	parameter1 = "1"
	parameter2 = 0
	parameter10 = 3680.0
	parameter11 = "1"
	parameter12 = "0"
	parameter13 = 100
	parameter60 = "0"
	parameter61 = 15
	parameter62 = 3600
	parameter65 = 0.1
	parameter66 = 3600
	configure ()
}

def getCommandClassVersions() {
	[
		0x20: 1,  // Basic
		0x32: 3,  // Meter
		0x56: 1,  // Crc16Encap
		0x70: 1,  // Configuration
		0x72: 2,  // ManufacturerSpecific
	]
}

// parse events into attributes
def parse(String description) {
	log.debug "parse() - description: "+description
	def result = null
	if (description != "updated") {
		def cmd = zwave.parse(description, commandClassVersions)
		if (cmd) {
			result = zwaveEvent(cmd)
			log.debug("'$description' parsed to $result")
		} else {
			log.debug("Couldn't zwave.parse '$description'")
		}
	}
	result
}

def handleMeterReport(cmd){
	if (cmd.meterType == 1) {
		if (cmd.scale == 0) {
			createEvent(name: "energy", value: cmd.scaledMeterValue, unit: "kWh")
		} else if (cmd.scale == 1) {
			createEvent(name: "energy", value: cmd.scaledMeterValue, unit: "kVAh")
		} else if (cmd.scale == 2) {
			createEvent(name: "power", value: Math.round(cmd.scaledMeterValue), unit: "W")
		}
	}
}

def zwaveEvent(hubitat.zwave.commands.meterv3.MeterReport cmd) {
	log.debug "v3 Meter report: "+cmd
	handleMeterReport(cmd)
}

def zwaveEvent(hubitat.zwave.commands.basicv1.BasicReport cmd)
{
	log.debug "Basic report: "+cmd
	def value = (cmd.value ? "on" : "off")
	def evt = createEvent(name: "switch", value: value, type: "physical", descriptionText: "$device.displayName was turned $value")
	if (evt.isStateChange) {
		[evt, response(["delay 3000", encap(meterGet(scale: 2))])]
	} else {
		evt
	}
}

def zwaveEvent(hubitat.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd)
{
	log.debug "Switch binary report: "+cmd
	def value = (cmd.value ? "on" : "off")
	[
		createEvent(name: "switch", value: value, type: "digital", descriptionText: "$device.displayName was turned $value"),
		response(["delay 3000", encap(meterGet(scale: 2))])
	]
}

def zwaveEvent(hubitat.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
	def result = []

	def msr = String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId)
	log.debug "msr: $msr"
	updateDataValue("MSR", msr)

	result << createEvent(descriptionText: "$device.displayName MSR: $msr", isStateChange: false)
}

def zwaveEvent(hubitat.zwave.Command cmd) {
	log.debug "${device.displayName}: Unhandled: $cmd"
	[:]
}

def on() {
	encapSequence([
		zwave.basicV1.basicSet(value: 0xFF),
		zwave.switchBinaryV1.switchBinaryGet()
	], 3000)
}

def off() {
	encapSequence([
		zwave.basicV1.basicSet(value: 0x00),
		zwave.switchBinaryV1.switchBinaryGet()
	], 3000)
}

/**
 * PING is used by Device-Watch in attempt to reach the Device
 * */
def ping() {
	log.debug "ping()"
	refresh()
}

def poll() {
	sendHubCommand(refresh())
}

def refresh() {
	log.debug "refresh()"
	encapSequence([
		zwave.switchBinaryV1.switchBinaryGet(),
		meterGet(scale: 0),
		meterGet(scale: 2)
	])
}

def reset() {
	encapSequence([
		meterReset(),
		meterGet(scale: 0)
	])
}

def meterGet(map)
{
	return zwave.meterV2.meterGet(map)
}

def meterReset()
{
	return zwave.meterV2.meterReset()
}

/*
 * Security encapsulation support:
 */
def zwaveEvent(hubitat.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
	def encapsulatedCommand = cmd.encapsulatedCommand(commandClassVersions)
	if (encapsulatedCommand) {
		log.debug "Parsed SecurityMessageEncapsulation into: ${encapsulatedCommand}"
		zwaveEvent(encapsulatedCommand)
	} else {
		log.warn "Unable to extract Secure command from $cmd"
	}
}

def zwaveEvent(hubitat.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd) {
	if (cmd.commandClass == 0x6C && cmd.parameter.size >= 4) { // Supervision encapsulated Message
		// Supervision header is 4 bytes long, two bytes dropped here are the latter two bytes of the supervision header
		cmd.parameter = cmd.parameter.drop(2)
		// Updated Command Class/Command now with the remaining bytes
		cmd.commandClass = cmd.parameter[0]
		cmd.command = cmd.parameter[1]
		cmd.parameter = cmd.parameter.drop(2)
	}
	def encapsulatedCommand = cmd.encapsulatedCommand()
	zwaveEvent(encapsulatedCommand)
}

def zwaveEvent(hubitat.zwave.commands.crc16encapv1.Crc16Encap cmd) {
	def version = commandClassVersions[cmd.commandClass as Integer]
	def ccObj = version ? zwave.commandClass(cmd.commandClass, version) : zwave.commandClass(cmd.commandClass)
	def encapsulatedCommand = ccObj?.command(cmd.command)?.parse(cmd.data)
	if (encapsulatedCommand) {
		log.debug "Parsed Crc16Encap into: ${encapsulatedCommand}"
		zwaveEvent(encapsulatedCommand)
	} else {
		log.warn "Unable to extract CRC16 command from $cmd"
	}
}

private secEncap(hubitat.zwave.Command cmd) {
	log.debug "encapsulating command using Secure Encapsulation, command: $cmd"
	zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
}

private crcEncap(hubitat.zwave.Command cmd) {
	log.debug "encapsulating command using CRC16 Encapsulation, command: $cmd"
	zwave.crc16EncapV1.crc16Encap().encapsulate(cmd).format()
}

private encap(hubitat.zwave.Command cmd) {
	if (zwaveInfo?.zw?.contains("s")) {
		secEncap(cmd)
	} else if (zwaveInfo?.cc?.contains("56")){
		crcEncap(cmd)
	} else {
		log.debug "no encapsulation supported for command: $cmd"
		cmd.format()
	}
}

private encapSequence(cmds, Integer delay=250) {
	delayBetween(cmds.collect{ encap(it) }, delay)
}

def stringToHexList(String value) {
	switch (value) {
        case "0"   : return 0x00
		case "1"   : return 0x01
		case "2"   : return 0x02
		case "3"   : return 0x03
		case "4"   : return 0x04
		case "5"   : return 0x05
		case "6"   : return 0x06
		case "7"   : return 0x07
		case "8"   : return 0x08
		case "9"   : return 0x09					
	}
}

def configure() {
	def parameter1Hex = stringToHexList (parameter1)
	def parameter11Hex = stringToHexList (parameter11)
	def parameter12Hex = stringToHexList (parameter12)
	def parameter60Hex = stringToHexList (parameter60)
	
	def result = []	
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter1Hex, parameterNumber:1, size:1)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: (parameter2 * 10).round(), parameterNumber:2, size:4)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: (parameter10 * 10).round(), parameterNumber:10, size:4)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter11Hex, parameterNumber:11, size:1)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter12Hex, parameterNumber:12, size:1)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter13.round(), parameterNumber:13, size:1)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter60Hex, parameterNumber:60, size:1)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter61.round(), parameterNumber:61, size:2)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter62.round(), parameterNumber:62, size:2)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: (parameter65 * 100).round(), parameterNumber:65, size:2)))
		result << response(encap(zwave.configurationV1.configurationSet(scaledConfigurationValue: parameter66.round(), parameterNumber:66, size:2)))    

	result
}
